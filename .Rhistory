#rename to race & frequency
names(Race_frequency) [1] = "Race"
#make it circular with coord_polar()
ggplot(Race_frequency, aes(x="", y= freq, fill= Race)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0)
View(dt)
rm(Race_frequency)
source('~/github/varyDelay/01_graph_demo_data.R', echo=TRUE)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
source(here::here('scr', 'calculate_ftp.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
# ====================
# Future Time Perspectives
# ====================
ftp <- isolate_data(dt, grep('ID', colnames(dt)), grep('FTP', colnames(dt)))
View(ftp)
View(calculate_ftp)
calculate_ftp(ftp[2:11], ftp[1])
calculate_ftp(dt, dt[1])
calculate_ftp <- function(data, id) {
### This function takes the Future Time Perspective data and calculates a
### summary score
### data: the full data frame
### id: the column number (or numbers) for participant identifier(s)
### cols: columns of FTP data
library(here)
library(psych)
source(here::here('scr', 'isolate_data.R'))
d0 <- isolate_data(data, id, grep('FTP', colnames(dt))[1]:rev(grep('FTP', colnames(dt)))[1])
keys<-c(1,1,1,1,1,1,1,-1,-1,-1)
items <- d0[2:11]
d1 <- reverse.code(keys, items, mini = 1, maxi=7)
d2 <- cbind.data.frame(d0[1], rowMeans(d1))
colnames(d2) <- c('ID', 'FTP')
return(d2)
}
calculate_ftp(dt, dt[1])
View(calculate_ftp)
grep("FTP", colnames(dt))
isolate_data(dt, ID,  grep("FTP", colnames(dt)))
isolate_data(dt,  grep("ID", colnames(dt)),  grep("FTP", colnames(dt)))
d0 <- isolate_data(data, grep('ID', colnames(data)), grep('FTP', colnames(dt)))
calculate_ftp <- function(data, id) {
### This function takes the Future Time Perspective data and calculates a
### summary score
### data: the full data frame
### id: the column number (or numbers) for participant identifier(s)
### cols: columns of FTP data
library(here)
library(psych)
source(here::here('scr', 'isolate_data.R'))
d0 <- isolate_data(data, grep('ID', colnames(data)), grep('FTP', colnames(dt)))
keys<-c(1,1,1,1,1,1,1,-1,-1,-1)
items <- d0[2:11]
d1 <- reverse.code(keys, items, mini = 1, maxi=7)
d2 <- cbind.data.frame(d0[1], rowMeans(d1))
colnames(d2) <- c('ID', 'FTP')
return(d2)
}
# ====================
# Future Time Perspectives
# ====================
#ftp <- isolate_data(dt, grep('ID', colnames(dt)), grep('FTP', colnames(dt)))
calculate_ftp(dt, dt[1])
calculate_ftp <- function(data) {
### This function takes the Future Time Perspective data and calculates a
### summary score
### data: the full data frame
### id: the column number (or numbers) for participant identifier(s)
### cols: columns of FTP data
library(here)
library(psych)
source(here::here('scr', 'isolate_data.R'))
d0 <- isolate_data(data, grep('ID', colnames(data)), grep('FTP', colnames(dt)))
keys<-c(1,1,1,1,1,1,1,-1,-1,-1)
items <- d0[2:11]
d1 <- reverse.code(keys, items, mini = 1, maxi=7)
d2 <- cbind.data.frame(d0[1], rowMeans(d1))
colnames(d2) <- c('ID', 'FTP')
return(d2)
}
# ====================
# Future Time Perspectives
# ====================
#ftp <- isolate_data(dt, grep('ID', colnames(dt)), grep('FTP', colnames(dt)))
calculate_ftp(dt)
# ====================
# Future Time Perspectives
# ====================
ftp <- calculate_ftp(dt)
hist(ftp)
View(ftp)
hist(ftp$FTP)
## calculate number of bins needed
bins = seq(min(ftp$FTP, na.rm=TRUE), max(tp$FTP, na.rm=TRUE), 1)
hist(ftp$FTP, breaks= bins, col= "grey")
## calculate number of bins needed
bins = seq(min(ftp$FTP, na.rm=TRUE), max(tp$FTP, na.rm=TRUE), 1)
## calculate number of bins needed
bins = seq(min(ftp$FTP, na.rm=TRUE), max(ftp$FTP, na.rm=TRUE), 1)
hist(ftp$FTP, breaks= bins, col= "grey")
## calculate number of bins needed
bins = seq(min(ftp$FTP, na.rm=TRUE), max(ftp$FTP, na.rm=TRUE), 0.5)
hist(ftp$FTP, breaks= bins, col= "grey")
# ====================
#
# ====================
count(dt$health_ins)
# ====================
#
# ====================
hins <- count(dt$health_ins)
View(hins)
names(hins) [1] = "Health Insurance"
View(hins)
# ====================
#
# ====================
dt$health_ins <- mapvalues(dt$health_ins, from = c('1', '2'), to = c('Yes', 'No'))
View(dt)
View(dt)
dt$health_ins
hins <- count(dt$health_ins)
names(hins) [1] = "Health Insurance"
View(hins)
# ====================
#
# ====================
dt$health_ins <- mapvalues(dt$health_ins, from = c('1', '2'), to = c('Yes', 'No'))
hins <- count(dt$health_ins)
names(hins) [1] = "Health"
#make hsFreq into piechart
title <- "Do you currenly have health insurance?"
ggplot(hins, aes(x="", y= freq, fill= Health)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0)
rm(hins)
#make it circular with coord_polar()
ggplot(Race_frequency, aes(x="", y= freq, fill= Race)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank())
#rename to race & frequency
names(Race_frequency) [1] = "Race"
#make it circular with coord_polar()
ggplot(Race_frequency, aes(x="", y= freq, fill= Race)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank())
rm(Race_frequency)
source('~/github/varyDelay/01_graph_demo_data.R', echo=TRUE)
# ====================
# health insurance
# ====================
dt$health_ins <- mapvalues(dt$health_ins, from = c('1', '2'), to = c('Yes', 'No'))
hins <- count(dt$health_ins)
names(hins) [1] = "Health"
#make into piechart
title <- "Do you currenly have health insurance?"
ggplot(hins, aes(x="", y= freq, fill= Health)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank())
ggplot(hins, aes(x="", y= freq, fill= Health)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + blank_theme
rm(hins)
ggplot(hins, aes(x="", y= freq, fill= Health)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + blank_theme()
ggplot(hins, aes(x="", y= freq, fill= Health)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + blank_theme + theme(axis.text.x=element_blank())
View(dt)
View(dt)
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
# ====================
# investments
# ====================
dt$investments <- mapvalues(dt$investments, from = c('1', '2'), to = c('Yes', 'No'))
invest <- count(dt$investments)
names(invest) [1] = "Health"
#make into piechart
title <- "Do you currenly have health insurance?"
ggplot(invest, aes(x="", y= freq, fill= Health)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank())
rm(invest)
ggplot(conf, aes(x="", y= freq, fill= Confidence)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
# ====================
# confidence
# ====================
dt$confidence <- mapvalues(dt$confidence, from = c('1', '2'), to = c('Yes', 'No'))
conf <- count(dt$confidence)
names(conf) [1] = "Confidence"
#make into piechart
title <- "How confident are you to unexpectedly come up with $2,000 in 30 days?"
ggplot(conf, aes(x="", y= freq, fill= Confidence)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
# ====================
# investments
# ====================
dt$investments <- mapvalues(dt$investments, from = c('1', '2'), to = c('Yes', 'No'))
invest <- count(dt$investments)
names(invest) [1] = "invest"
#make into piechart
title <- "Do you currenly have health insurance?"
ggplot(invest, aes(x="", y= freq, fill= invest)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
rm(invest)
source('~/github/varyDelay/02_graph_questionnaires.R', echo=TRUE)
View(dt)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
source(here::here('scr', 'calculate_ftp.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
# ====================
# Future Time Perspectives
# ====================
ftp <- calculate_ftp(dt)
## calculate number of bins needed
bins = seq(min(ftp$FTP, na.rm=TRUE), max(ftp$FTP, na.rm=TRUE), 0.5)
# #build histogram
hist(ftp$FTP, breaks= bins, col= "grey")
# ====================
# health insurance
# ====================
dt$health_ins <- mapvalues(dt$health_ins, from = c('1', '2'), to = c('Yes', 'No'))
View(dt)
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
# ====================
# extra money
# ====================
#data key (qualtrics): 1= yes- have to repay; 2- yes- not have to repay; NA=NA
dt$extra_money <- mapvalues(dt$extra_money, from = c('1', '2', 'NA'),
to = c("My friends or family would lend me the money and expect me to repay",
"My friends of family would give me the money with no expectation of repayment", "NA"))
money <- count(dt$extra_money)
names(money) [1] = "extra_money"
#make into piechart
title <- "How moneyident are you to unexpectedly come up with $2,000 in 30 days?"
ggplot(money, aes(x="", y= freq, fill= extra_money)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
#make into piechart
title <- "Would friends/family loan money and expect to be repaid?"
ggplot(money, aes(x="", y= freq, fill= extra_money)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
$120,000-$129,999', '$130,000-$139,999', '$140,000-$149,999','$150,000 or more')
# ====================
# liquid savings
# ====================
dt$liquid_savings <-
from = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16'),
'$40,000-$49,999', '$50,000-$59,999', '$60,000-$69,999', '$70,000-$79,999',
dt$liquid_savings <-
mapvalues(dt$liquid_savings,
from = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16'),
to = c('less than $10,000', '$10,000-$19,999', '$20,000-$29,999', '$30,000-$39,999',
'$40,000-$49,999', '$50,000-$59,999', '$60,000-$69,999', '$70,000-$79,999',
'$80,000-$89,999', '$90,000-$99,999', '$100,000-$109,999', '$110,000-$119,999', '
$120,000-$129,999', '$130,000-$139,999', '$140,000-$149,999','$150,000 or more')
)
savings <- count(dt$liquid_savings)
names(savings) [1] = "Savings"
## calculate number of bins needed
bins = seq(min(dt$liquid_savings, na.rm=TRUE), max(dt$liquid_savings, na.rm=TRUE), 0.5)
# #build histogram
hist(dt$liquid_savings, breaks= bins, col= "grey")
## calculate number of bins needed
bins = seq(min(dt$liquid_savings, na.rm=TRUE), max(dt$liquid_savings, na.rm=TRUE), 1)
# #build histogram
hist(dt$liquid_savings, breaks= bins, col= "grey")
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
## calculate number of bins needed
bins = seq(min(dt$liquid_savings, na.rm=TRUE), max(dt$liquid_savings, na.rm=TRUE), 1)
# #build histogram
hist(dt$liquid_savings, breaks= bins, col= "grey")
#make into piechart
title <- "How much money do you have in savings today (in cash, checking, and savings account balances)?"
ggplot(savings, aes(x="", y= freq, fill= Savings)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
rm(savings)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
source(here::here('scr', 'calculate_ftp.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
# ====================
# Future Time Perspectives
# ====================
ftp <- calculate_ftp(dt)
## calculate number of bins needed
bins = seq(min(ftp$FTP, na.rm=TRUE), max(ftp$FTP, na.rm=TRUE), 0.5)
# #build histogram
hist(ftp$FTP, breaks= bins, col= "grey")
# ====================
# liquid savings
# ====================
dt$liquid_savings <- mapvalues(dt$liquid_savings,
from = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16'),
to = c('less than $10,000', '$10,000-$19,999', '$20,000-$29,999', '$30,000-$39,999',
'$40,000-$49,999', '$50,000-$59,999', '$60,000-$69,999', '$70,000-$79,999',
'$80,000-$89,999', '$90,000-$99,999', '$100,000-$109,999', '$110,000-$119,999', '
$120,000-$129,999', '$130,000-$139,999', '$140,000-$149,999','$150,000 or more'))
savings <- count(dt$liquid_savings)
names(savings) [1] = "Savings"
View(savings)
View(savings)
savings[rownames('NA')]
savings$Savings
savings <- savings[! savings$Savings == NA]
View(savings)
savings <- savings[! savings$Savings == NA,]
View(savings)
savings <- count(dt$liquid_savings)
names(savings) [1] = "Savings"
#data key (qualtrics): 1= yes- have to repay; 2- yes- not have to repay; NA=NA
savings <- savings[!(savings$Savings == NA,)]
savings <- savings[!(savings$Savings == NA,)]
savings <- savings[!(savings$Savings == NA),]
View(savings)
savings <- count(dt$liquid_savings)
names(savings) [1] = "Savings"
savings <- savings[!(savings$Savings == NA),]
View(savings)
savings$Savings == NA
savings[savings$Savings == NA]
savings[savings$Savings == NA,]
savings <- savings[!(savings$Savings == NA),]
View(savings)
savings <- count(dt$liquid_savings)
names(savings) [1] = "Savings"
View(savings)
savings$Savings == NA
savings[which(savings$Savings == NA),]
savings[which(savings$Savings == 'NA'),]
savings[which(savings$Savings != NA),]
savings[which(savings$Savings != 'NA'),]
savings <- savings[which(savings$Savings != 'NA'),]
View(savings)
# ====================
# confidence
# ====================
dt$confidence <- mapvalues(dt$confidence, from = c('1', '2'), to = c('Yes', 'No'))
conf <- count(dt$confidence)
names(conf) [1] = "Confidence"
conf <- conf[which(conf$Confidence != 'NA'),]
View(conf)
# ====================
# investments
# ====================
dt$investments <- mapvalues(dt$investments, from = c('1', '2'), to = c('Yes', 'No'))
invest <- count(dt$investments)
names(invest) [1] = "invest"
invest <- invest[which(invest$invest != 'NA'),]
View(invest)
# ====================
# extra money
# ====================
#data key (qualtrics): 1= yes- have to repay; 2- yes- not have to repay; NA=NA
dt$extra_money <- mapvalues(dt$extra_money, from = c('1', '2', 'NA'),
to = c("Yes and expect me to repay",
"Yes with no expectation of repayment", "NA"))
money <- count(dt$extra_money)
names(money) [1] = "extra_money"
money <- money[which(money$extra_money != 'NA'),]
#make into piechart
title <- "Would friends/family loan money and expect to be repaid?"
ggplot(money, aes(x="", y= freq, fill= extra_money)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
# isolate demo data
demo <- isolate_data(dt, grep('ID', colnames(dt)),
grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
# ====================
# pie chart of race
# ====================
demo$Race <- factor(demo$Race)
demo$Race <- mapvalues(demo$Race, from = c('1', '2', '3', '4', '5', '6', '7'),
to = c('White/Caucasian',
'Black/African American',
'Asian',
'American Indian/ Alaska Native',
'Native Hawaiian/Island Pacificer',
'Multiracial',
'Other'))
#pie(table(demo$Race))
#get Race Frequencies & save as its own table
Race_frequency <- count(demo$Race)
Race_frequency <- Race_frequency [c(1:3),]
Race_frequency <- count(demo$Race)
#rename to race & frequency
names(Race_frequency) [1] = "Race"
#make it circular with coord_polar()
ggplot(Race_frequency, aes(x="", y= freq, fill= Race)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank())
View(demo)
# Examine demographic data
# 12.9.19 KLS and SL
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
# set hard-coded variables
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
# isolate demo data
demo <- isolate_data(dt, grep('ID', colnames(dt)),
grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
View(demo)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
source(here::here('scr', 'calculate_ftp.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
# ====================
# Future Time Perspectives
# ====================
ftp <- calculate_ftp(dt)
## calculate number of bins needed
bins = seq(min(ftp$FTP, na.rm=TRUE), max(ftp$FTP, na.rm=TRUE), 0.5)
# #build histogram
hist(ftp$FTP, breaks= bins, col= "grey")
# ====================
# liquid savings
# ====================
dt$liquid_savings <- mapvalues(dt$liquid_savings,
from = c('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16'),
to = c('less than $10,000', '$10,000-$19,999', '$20,000-$29,999', '$30,000-$39,999',
'$40,000-$49,999', '$50,000-$59,999', '$60,000-$69,999', '$70,000-$79,999',
'$80,000-$89,999', '$90,000-$99,999', '$100,000-$109,999', '$110,000-$119,999', '
$120,000-$129,999', '$130,000-$139,999', '$140,000-$149,999','$150,000 or more'))
savings <- count(dt$liquid_savings)
names(savings) [1] = "Savings"
savings <- savings[which(savings$Savings != 'NA'),]
#make into piechart
title <- "How much money do you have in savings today (in cash, checking, and savings account balances)?"
ggplot(savings, aes(x="", y= freq, fill= Savings)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
rm(savings)
# ====================
# confidence
# ====================
dt$confidence <- mapvalues(dt$confidence, from = c('1', '2'), to = c('Yes', 'No'))
conf <- count(dt$confidence)
names(conf) [1] = "Confidence"
conf <- conf[which(conf$Confidence != 'NA'),]
#make into piechart
title <- "How confident are you to unexpectedly come up with $2,000 in 30 days?"
ggplot(conf, aes(x="", y= freq, fill= Confidence)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
rm(conf)
# ====================
# investments
# ====================
dt$investments <- mapvalues(dt$investments, from = c('1', '2'), to = c('Yes', 'No'))
invest <- count(dt$investments)
names(invest) [1] = "invest"
invest <- invest[which(invest$invest != 'NA'),]
#make into piechart
title <- "Do you currently have non-retirement investments?"
ggplot(invest, aes(x="", y= freq, fill= invest)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
rm(invest)
# ====================
# health insurance
# ====================
dt$health_ins <- mapvalues(dt$health_ins, from = c('1', '2'), to = c('Yes', 'No'))
hins <- count(dt$health_ins)
names(hins) [1] = "Health"
hins <- hins[which(hins$Health != 'NA'),]
#make into piechart
title <- "Do you currenly have health insurance?"
ggplot(hins, aes(x="", y= freq, fill= Health)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
rm(hins)
# ====================
# extra money
# ====================
#data key (qualtrics): 1= yes- have to repay; 2- yes- not have to repay; NA=NA
dt$extra_money <- mapvalues(dt$extra_money, from = c('1', '2', 'NA'),
to = c("Yes and expect me to repay",
"Yes with no expectation of repayment", "NA"))
money <- count(dt$extra_money)
names(money) [1] = "extra_money"
money <- money[which(money$extra_money != 'NA'),]
#make into piechart
title <- "Would friends/family loan money and expect to be repaid?"
ggplot(money, aes(x="", y= freq, fill= extra_money)) + geom_bar (stat= "identity", width=1) +
coord_polar ("y", start = 0) + theme(axis.text.x=element_blank()) + ggtitle(title)
rm(money)
