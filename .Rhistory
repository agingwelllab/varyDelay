calculate_ftp(dt,1)
d0 <- calculate_ftp(dt,1)
View(d0)
View(d0)
dt <- read.csv(here('data', 'varydelay_data.csv'))
dt <- read.csv(here('data', 'varydelay_data.csv'))
calculate_ftp <- function(data, id) {
### This function takes the Future Time Perspective data and calculates a
### summary score
### data: the full data frame
### id: the column number (or numbers) for participant identifier(s)
### cols: columns of FTP data
library(here)
source(here('scr', 'isolate_data.R'))
d0 <- isolate_data(data, id, grep('FTP', colnames(dt))[1]:rev(grep('FTP', colnames(dt)))[1])
}
d0 <- calculate_ftp(dt,1)
View(d0)
install.packages('psych')
d1 <- reverse.code(keys, items)
library(psych)
keys<-c(1,1,1,1,1,1,1,-1,-1,-1)
items <- d0[2:11]
d1 <- reverse.code(keys, items)
View(d1)
View(d0)
View(d1)
FTP_10
dt$FTP_10
d1 <- reverse.code(keys, items, mini = 1, maxi=7)
View(d1)
d2 <- rowMeans(d1)
d2
View(d1)
d2 <- cbind(d0[1], rowMeans(d1))
View(d2)
d2 <- c(d0[1], rowMeans(d1))
View(d2)
d2 <- cbind(d0[1], rowMeans(d1))
View(d2)
d2 <- cbind.data.frame(d0[1], rowMeans(d1))
View(d2)
View(d2)
return(d2)
dt <- read.csv(here('data', 'varydelay_data.csv'))
calculate_ftp <- function(data, id) {
### This function takes the Future Time Perspective data and calculates a
### summary score
### data: the full data frame
### id: the column number (or numbers) for participant identifier(s)
### cols: columns of FTP data
library(here)
library(psych)
source(here('scr', 'isolate_data.R'))
d0 <- isolate_data(data, id, grep('FTP', colnames(dt))[1]:rev(grep('FTP', colnames(dt)))[1])
keys<-c(1,1,1,1,1,1,1,-1,-1,-1)
items <- d0[2:11]
d1 <- reverse.code(keys, items, mini = 1, maxi=7)
d2 <- cbind.data.frame(d0[1], rowMeans(d1))
colnames(d2) <- c('ID', 'FTP')
return(d2)
}
d0 <- calculate_ftp(dt,1)
View(d0)
# load required packages
library(here)
# load source functions
source(here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here('data', 'varydelay_data.csv'))
# isolate demo data
grep('Sex', colnames(dt))
grep('physical_health', colnames(dt))
demo <- isolate_data(dt, grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
View(isolate_data)
demo <- isolate_data(dt, dt$ID, 7:12)
demo <- isolate_data(dt, dt$ID, dt$Sex:dt$physical_health)
demo <- isolate_data(dt, ID, 7:12)
demo <- isolate_data(dt, 'ID', 7:12)
demo <- isolate_data(dt, dt$ID, 7:12)
demo <- isolate_data(dt, 1, 7:12)
demo <- isolate_data(dt, grep('ID', colnames(dt)), grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
View(demo)
rm(demo)
demo <- isolate_data(dt, grep('ID', colnames(dt)), grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
View(demo)
demo <- isolate_data(dt, grep('ID', colnames(dt)),
grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
View(demo)
# histogram of race
hist(dt$Race)
# histogram of race
hist(demo$Race)
# histogram of race
c('White/Caucasian', 'Black/African American', 'Asian',
'American Indian/ Alaska Native', 'Native Hawaiian/Island Pacificer',
'Multiracial', 'Other')
# histogram of race
demo$Race <- factor(demo$Race)
# isolate demo data
demo <- isolate_data(dt, grep('ID', colnames(dt)),
grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
# histogram of race
demo$Race <- factor(demo$Race, levels = c('White/Caucasian', 'Black/African American', 'Asian',
'American Indian/ Alaska Native', 'Native Hawaiian/Island Pacificer',
'Multiracial', 'Other'))
View(demo)
# isolate demo data
demo <- isolate_data(dt, grep('ID', colnames(dt)),
grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
library(plyr)
install.packages('plyr')
library(plyr)
mapvalues(demo$Race, from = c('1', '2', '3', '4', '5', '6', '7'), to = c('White/Caucasian', 'Black/African American', 'Asian',
'American Indian/ Alaska Native', 'Native Hawaiian/Island Pacificer',
'Multiracial', 'Other')))
mapvalues(demo$Race, from = c('1', '2', '3', '4', '5', '6', '7'), to = c('White/Caucasian', 'Black/African American', 'Asian',
'American Indian/ Alaska Native', 'Native Hawaiian/Island Pacificer',
'Multiracial', 'Other'))
demo$Race <- mapvalues(demo$Race, from = c('1', '2', '3', '4', '5', '6', '7'), to = c('White/Caucasian', 'Black/African American', 'Asian',
'American Indian/ Alaska Native', 'Native Hawaiian/Island Pacificer',
'Multiracial', 'Other'))
hist(demo$Race)
hist(demo$Race)
table(demo$Race)
hist(demo$Race)
pie(demo$Race)
pie(table(demo$Race))
table(demo$Race
)
# histogram of income
demo$Income <- factor(demo$Income)
levels(demo$Income)
View(demo)
seq(1,16,1)
as.character(seq(1,16,1))
# isolate demo data
demo <- isolate_data(dt, grep('ID', colnames(dt)),
grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
# histogram of income
demo$Income <- ordered(demo$Income, levels = as.character(seq(1,16,1))
)
hist(demo$Income)
hist(as.numeric(demo$Income))
install.packages('ggplot2')
library(ggplot2)
ggplot(demo, aes(Income))
ggplot(demo, aes(Income)) + geom_histogram()
ggplot(demo, aes(Income)) + geom_histogram(stat='count')
ggplot(demo, aes(Income)) + geom_histogram(stat='count') + geom_density(alpha=.2, fill="#FF6666")
# histogram of income
demo$Income <- ordered(demo$Income, levels = as.character(seq(1,16,1)))
ggplot(demo, aes(Income)) + geom_histogram(stat='count')
# histogram of income
demo$Income <- ordered(demo$Income, levels = as.character(seq(1,16,1)))
ggplot(demo, aes(Income)) + geom_histogram(stat='count')
seq(1,16,1)
c(1,2,3,4)
demo$Income <- mapvalues(demo$Income, from = as.character(seq(1,16,1)),
to = c('< $10,000', '$10,000-$19,999', '$20,000-$29,999',
'30,000-$39,999', '$40,000-$49,999','$50,000-$59,999',
'$60,000-$69,999', '$70,000-$79,999', '$80,000-$89,999',
'$90,000-$99,999', '$100,000-$109,999', '$110,000-$119,999',
'$120,000-$129,999', '$130,000-$139,999', '$140,000-$149,999',
'>= $150,000') )
ggplot(demo, aes(Income)) + geom_histogram(stat='count')
ggplot(demo, aes(Income)) + geom_histogram(stat='count') + theme_minimal()
ggplot(demo, aes(Income)) + geom_histogram(stat='count') +
theme_minimal(axis.text.x  = element_text(angle=90, vjust=0.5, size=16))
ggplot(demo, aes(Income)) + geom_histogram(stat='count') +
theme_minimal() + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=16))
ggplot(demo, aes(Income)) + geom_histogram(stat='count') +
theme_minimal() + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=12))
ggplot(demo, aes(Income)) + geom_histogram(stat='count') +
theme_minimal() + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=12)) +
expand_limits(x = c(1,16))
ggplot(demo, aes(Income)) + geom_histogram(stat='count') +
theme_minimal() + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=12))
# isolate demo data
demo <- isolate_data(dt, grep('ID', colnames(dt)),
grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
# histogram of income
demo$Income <- ordered(demo$Income, levels = as.character(seq(1,16,1)))
# isolate demo data
demo <- isolate_data(dt, grep('ID', colnames(dt)),
grep('Sex', colnames(dt)):grep('physical_health', colnames(dt)))
ggplot(demo, aes(Income)) + geom_histogram(stat='count') +
theme_minimal() + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=12))
ggplot(demo, aes(Income)) + geom_histogram(bins = 16, stat='count') +
theme_minimal() + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=12))
d
# histogram of income
demo$Income <- ordered(demo$Income, levels = as.character(seq(1,16,1)))
demo$Income <- mapvalues(demo$Income, from = as.character(seq(1,16,1)),
to = c('< $10,000', '$10,000-$19,999', '$20,000-$29,999',
'30,000-$39,999', '$40,000-$49,999','$50,000-$59,999',
'$60,000-$69,999', '$70,000-$79,999', '$80,000-$89,999',
'$90,000-$99,999', '$100,000-$109,999', '$110,000-$119,999',
'$120,000-$129,999', '$130,000-$139,999', '$140,000-$149,999',
'>= $150,000') )
ggplot(demo, aes(Income)) + geom_histogram(bins = 16, stat='count') +
theme_minimal() + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=12))
ggplot(demo, aes(Income)) + geom_histogram(bins = 16, stat='count') +
theme_minimal() + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=12))
ggplot(demo, aes(Income)) + geom_histogram(aes(bins = 16), stat='count') +
theme_minimal() + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=12))
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay)█, !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
install.packages('tidyverse')
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay)█, !is.na(arr_delay))
install.packages('nycflights13')
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay)█, !is.na(arr_delay))
not_cancelled <- flights %>%
filter(!is.na(dep_delay)█, !is.na(arr_delay))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
source('~/Box/Aging Well Lab/Projects/varyDelay/02_race_piechart.R', echo=TRUE)
source('~/Box/Aging Well Lab/Projects/varyDelay/02_race_piechart.R', echo=TRUE)
#extract Race
Race <- varydelay_data$Race
source('~/Box/Aging Well Lab/Projects/varyDelay/02_race_piechart.R', echo=TRUE)
source('~/Box/Aging Well Lab/Projects/varyDelay/02_race_piechart.R', echo=TRUE)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here('scr', 'isolate_data.R'))
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here('scr', 'isolate_data.R'))
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here('scr', 'isolate_data.R'))
# load required packages
library(here)
#library(plyr)
library(ggplot2)
# load source functions
source(here('scr', 'isolate_data.R'))
# load required packages
library(here)
#library(plyr)
library(ggplot2)
# load source functions
source(here('scr', 'isolate_data.R'))
source('~/Box/Aging Well Lab/Projects/varyDelay/02_race_piechart.R', echo=TRUE)
# load required packages
library(here)
library(plyr)
library(plyr)
# load required packages
library(here)
library(ggplot2)
# load source functions
source(here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here('data', 'varydelay_data.csv'))
#extract Race
Race <- dt$Race
# load required packages
library(plyr)
library(here)
library(ggplot2)
# load source functions
source(here('scr', 'isolate_data.R'))
# load source functions
source(here::here('scr', 'isolate_data.R'))
source('~/Box/Aging Well Lab/Projects/varyDelay/02_race_piechart.R', echo=TRUE)
# load required packages
library(plyr)
library(here)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
#extract Race
Race <- dt$Race
#make Race categorical (factor)
as.factor(Race)
#get Race Frequencies & save as its own table
count(Race)
Race_frequency <- Race_frequency [c(1:3),]
#get Race Frequencies & save as its own table
Race_frequency <- count(Race)
Race_frequency <- Race_frequency [c(1:3),]
Race_frequency <- count(Race)
#rename to race & frequency
names(Race_frequency) [1] = "Race"
# create barchart of Race & frequency
ggplot(Race_frequency, aes(x="", y= freq, fill= Race)) + geom_bar (stat= "identity", width=1)
# load required packages
library(plyr)
library(here)
library(ggplot2)
source('~/Box/Aging Well Lab/Projects/varyDelay/02_race_piechart.R', echo=TRUE)
source('~/Box/Aging Well Lab/Projects/varyDelay/02_race_piechart.R', echo=TRUE)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
# load source functions
source(here('scr', 'isolate_data.R'))
# load source functions
source(here::here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
#extract age from data
Age <- dt$Age
#calculate number of bins needed
bins = seq(min(Age), max(Age), 1)
min(Age)
min(Age, na.rm=TRUE)
#calculate number of bins needed
bins = seq(min(Age, na.rm=TRUE), max(Age, na.rm=TRUE), 1)
#build histogram
hist(Age, breaks= bins, col= "grey")
source('~/Box/Aging Well Lab/Projects/varyDelay/03_age_hist.R', echo=TRUE)
source('~/Box/Aging Well Lab/Projects/varyDelay/03_age_hist.R', echo=TRUE)
# load required packages
library(here)
# load source functions
source(here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here('data', 'varydelay_data.csv'))
# load source functions
source(here::here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
View(dt)
View(dt)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here('data', 'varydelay_data.csv'))
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
View(dt)
# load required packages
library(here)
# load data
dt <- read.csv(here('data', 'pilotdata.csv'))
# load required packages
library(here)
# load data
dt <- read.csv(here('data', 'pilotdata.csv'))
# load required packages
library(here)
# load data
dt <- read.csv(here('data', 'pilotdata.csv'))
View(dt)
# add id column
dt$ID <- c(0,0,seq(1,nrow(dt)-2,1))
View(dt)
# clean
dt <- dt[-c(3:10)]
dt <- dt[c(ncol(dt),1:(ncol(dt)-1))]
# create data dictionary
dd <- t(dt[1,])
View(dd)
dd <- cbind(rownames(dd), data.frame(dd, row.names = NULL))
View(dd)
colnames(dd) <- c('Variable', 'Question')
View(dd)
# finish cleaning
dt <- dt[-c(1:2),]
View(dt)
dt$Age <- as.integer(as.character(dt$Age))
dt$Age <- dt$Age + 19
View(dt)
# Clean varydelay data
# 12.9.19 KLS and SL
# load required packages
library(here)
# load source functions
# set hard-coded variables
# load data
dt <- read.csv(here('data', 'pilotdata.csv'))
# add id column
dt$ID <- c(0,0,seq(1,nrow(dt)-2,1))
# clean
dt <- dt[-c(3:10)]
dt <- dt[c(ncol(dt),1:(ncol(dt)-1))]
# create data dictionary
dd <- t(dt[1,])
dd <- cbind(rownames(dd), data.frame(dd, row.names = NULL))
colnames(dd) <- c('Variable', 'Question')
# finish cleaning
dt <- dt[-c(1:2),]
dt$Age <- as.integer(as.character(dt$Age))
dt$Age <- dt$Age + 19
View(dt)
# load required packages
library(here)
# load data
dt <- read.csv(here('data', 'pilotdata.csv'))
# add id column
dt$ID <- c(0,0,seq(1,nrow(dt)-2,1))
# clean
dt <- dt[-c(3:10)]
dt <- dt[c(ncol(dt),1:(ncol(dt)-1))]
# create data dictionary
dd <- t(dt[1,])
View(dd)
dd <- cbind(rownames(dd), data.frame(dd, row.names = NULL))
colnames(dd) <- c('Variable', 'Question')
# finish cleaning
dt <- dt[-c(1:2),]
dt$Age <- as.integer(as.character(dt$Age))
dt$Age <- dt$Age + 19
View(dt)
View(dd)
View(dt)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
View(dt)
# load required packages
library(here)
library(plyr)
library(ggplot2)
# load source functions
source(here::here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
View(dt)
install.packages("here")
install.packages("here")
library(ggplot2)
# load required packages
library(here)
# load source functions
source(here::here('scr', 'isolate_data.R'))
# load data
dt <- read.csv(here::here('data', 'varydelay_data.csv'))
View(isolate_data)
View(dt)
View(isolate_data)
grep("X" colnames(dt))
grep("X", colnames(dt))
grep("X", colnames(dt))[-1]
grep("X", colnames(dt))[1]
grep("X", colnames(dt))[-1]
n(grep("X", colnames(dt)))
length(grep("X", colnames(dt)))
grep("X", colnames(dt))[length(grep("X", colnames(dt)))]
# isolate gamble data
gd <- isolate_data(dt, "ID", grep("X", colnames(dt))[1]:grep("X", colnames(dt))[length(grep("X", colnames(dt)))])
grep("X", colnames(dt))
# isolate gamble data
gd <- isolate_data(dt, "ID", 32:67)
# isolate gamble data
gd <- isolate_data(dt, ID, 32:67)
View(isolate_data)
# isolate gamble data
gd <- isolate_data(dt, "ID", 32:67)
# isolate gamble data
gd <- isolate_data(dt, 1, 32:67)
View(gd)
grep("Age", colnames(dt))
# isolate gamble data
gd <- isolate_data(dt, c(1,8), 32:67)
source(here::here('scr', 'summarySE.R'))
View(gd)
library(tidyr)
